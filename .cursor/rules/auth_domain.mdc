
# Authentication Domain Rules

## Authentication Architecture

### Domain-Driven Design Structure
```
src/domains/user/
├── handlers/           # HTTP request handlers
│   ├── auth_handlers.rs    # Login, register, refresh
│   └── auth_middleware.rs  # JWT validation middleware
├── services/           # Business logic services
│   ├── jwt_service.rs      # JWT token operations
│   └── password_service.rs # Password hashing/validation
├── dto.rs             # Data transfer objects
├── state.rs           # Domain state management
└── mod.rs             # Domain module exports
```

### Core Authentication Features
- **JWT-based authentication**: Stateless token authentication
- **Password security**: Argon2 hashing with salt
- **Session management**: Token refresh and invalidation
- **Role-based access**: User roles and permissions
- **Security middleware**: Request validation and protection

## JWT Service Implementation

### JWT Token Structure
```rust
#[derive(Debug, Serialize, Deserialize)]
pub struct Claims {
    pub sub: String,        // Subject (user ID)
    pub email: String,      // User email
    pub role: UserRole,     // User role/permissions
    pub exp: usize,         // Expiration timestamp
    pub iat: usize,         // Issued at timestamp
    pub locale: Option<String>, // User's preferred locale
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum UserRole {
    Admin,
    User,
    Guest,
    Moderator,
}
```

### JWT Service Core
```rust
#[derive(Clone)]
pub struct JwtService {
    secret: String,
    access_token_expiry: Duration,
    refresh_token_expiry: Duration,
}

impl JwtService {
    pub fn new(secret: String) -> Self {
        Self {
            secret,
            access_token_expiry: Duration::hours(1),
            refresh_token_expiry: Duration::days(7),
        }
    }
    
    pub fn generate_access_token(&self, user: &User) -> Result<String, AuthError> {
        let claims = Claims {
            sub: user.id.to_string(),
            email: user.email.clone(),
            role: user.role.clone(),
            exp: (Utc::now() + self.access_token_expiry).timestamp() as usize,
            iat: Utc::now().timestamp() as usize,
            locale: user.preferred_locale.clone(),
        };
        
        encode(&Header::default(), &claims, &EncodingKey::from_secret(self.secret.as_ref()))
            .map_err(AuthError::TokenGeneration)
    }
    
    pub fn validate_token(&self, token: &str) -> Result<Claims, AuthError> {
        decode::<Claims>(token, &DecodingKey::from_secret(self.secret.as_ref()), &Validation::default())
            .map(|data| data.claims)
            .map_err(AuthError::TokenValidation)
    }
}
```

## Password Service Implementation

### Password Security
```rust
#[derive(Clone)]
pub struct PasswordService {
    config: Argon2<'static>,
}

impl PasswordService {
    pub fn new() -> Self {
        Self { config: Argon2::default() }
    }
    
    pub async fn hash_password(&self, password: &str) -> Result<String, AuthError> {
        let salt = SaltString::generate(&mut OsRng);
        
        let password_hash = tokio::task::spawn_blocking({
            let config = self.config.clone();
            let password = password.to_string();
            let salt = salt.clone();
            
            move || {
                config.hash_password(password.as_bytes(), &salt)
                    .map_err(AuthError::PasswordHashing)
            }
        }).await
        .map_err(|_| AuthError::TaskJoinError)??;
        
        Ok(password_hash.to_string())
    }
    
    pub async fn verify_password(&self, password: &str, hash: &str) -> Result<bool, AuthError> {
        let parsed_hash = PasswordHash::new(hash)
            .map_err(AuthError::PasswordParsing)?;
        
        let is_valid = tokio::task::spawn_blocking({
            let config = self.config.clone();
            let password = password.to_string();
            let parsed_hash = parsed_hash.clone();
            
            move || {
                config.verify_password(password.as_bytes(), &parsed_hash).is_ok()
            }
        }).await
        .map_err(|_| AuthError::TaskJoinError)?;
        
        Ok(is_valid)
    }
    
    pub fn validate_password_strength(&self, password: &str) -> Result<(), AuthError> {
        if password.len() < 8 {
            return Err(AuthError::WeakPassword("Password must be at least 8 characters".to_string()));
        }
        
        let has_uppercase = password.chars().any(|c| c.is_ascii_uppercase());
        let has_lowercase = password.chars().any(|c| c.is_ascii_lowercase());
        let has_digit = password.chars().any(|c| c.is_ascii_digit());
        let has_special = password.chars().any(|c| "!@#$%^&*()_+-=[]{}|;:,.<>?".contains(c));
        
        if !has_uppercase || !has_lowercase || !has_digit || !has_special {
            return Err(AuthError::WeakPassword(
                "Password must contain uppercase, lowercase, digit, and special character".to_string()
            ));
        }
        
        Ok(())
    }
}
```

## User Models and DTOs

### User Model
```rust
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct User {
    #[serde(rename = "_id", skip_serializing_if = "Option::is_none")]
    pub id: Option<ObjectId>,
    pub email: String,
    pub password_hash: String,
    pub role: UserRole,
    pub is_active: bool,
    pub email_verified: bool,
    pub preferred_locale: Option<String>,
    pub created_at: chrono::DateTime<chrono::Utc>,
    pub updated_at: chrono::DateTime<chrono::Utc>,
    pub last_login: Option<chrono::DateTime<chrono::Utc>>,
}
```

### Data Transfer Objects
```rust
#[derive(Debug, Deserialize, Validate)]
pub struct RegisterRequest {
    #[validate(email)]
    pub email: String,
    
    #[validate(length(min = 8))]
    pub password: String,
    
    pub preferred_locale: Option<String>,
}

#[derive(Debug, Deserialize, Validate)]
pub struct LoginRequest {
    #[validate(email)]
    pub email: String,
    
    #[validate(length(min = 1))]
    pub password: String,
}

#[derive(Debug, Serialize)]
pub struct AuthResponse {
    pub access_token: String,
    pub refresh_token: String,
    pub user: UserResponse,
    pub expires_in: i64,
}
```

## Authentication Handlers

### Core Handler Pattern
```rust
pub async fn register_handler(
    State(state): State<AppState>,
    Json(request): Json<RegisterRequest>
) -> Result<Json<AuthResponse>, AppError> {
    // Validate request
    request.validate()?;
    
    // Check if user exists
    let users_collection = get_users_collection(&state.database).await?;
    if users_collection.find_one(doc! {"email": &request.email}, None).await?.is_some() {
        return Err(AppError::Conflict("User already exists".to_string()));
    }
    
    // Validate and hash password
    state.password_service.validate_password_strength(&request.password)?;
    let password_hash = state.password_service.hash_password(&request.password).await?;
    
    // Create and save user
    let mut user = User::new(request.email, password_hash);
    let insert_result = users_collection.insert_one(&user, None).await?;
    user.id = Some(insert_result.inserted_id.as_object_id().unwrap());
    
    // Generate tokens
    let access_token = state.jwt_service.generate_access_token(&user)?;
    let refresh_token = state.jwt_service.generate_refresh_token(&user.id.unwrap())?;
    
    Ok(Json(AuthResponse {
        access_token,
        refresh_token,
        user: UserResponse::from(user),
        expires_in: 3600,
    }))
}
```

## Authentication Middleware

### JWT Validation Middleware
```rust
pub async fn auth_middleware<B>(
    State(state): State<AppState>,
    mut request: Request<B>,
    next: Next<B>
) -> Result<Response, StatusCode> {
    // Extract Authorization header
    let auth_header = request.headers()
        .get("authorization")
        .and_then(|header| header.to_str().ok())
        .and_then(|header| {
            if header.starts_with("Bearer ") {
                Some(&header[7..])
            } else {
                None
            }
        });
    
    let token = auth_header.ok_or(StatusCode::UNAUTHORIZED)?;
    
    // Validate token
    let claims = state.jwt_service
        .validate_token(token)
        .map_err(|_| StatusCode::UNAUTHORIZED)?;
    
    // Check if user still exists and is active
    let user_id = ObjectId::parse_str(&claims.sub)
        .map_err(|_| StatusCode::UNAUTHORIZED)?;
    
    let users_collection = get_users_collection(&state.database)
        .await
        .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;
    
    let user = users_collection
        .find_one(doc! {"_id": user_id}, None)
        .await
        .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?
        .ok_or(StatusCode::UNAUTHORIZED)?;
    
    if !user.is_active {
        return Err(StatusCode::FORBIDDEN);
    }
    
    // Add user info to request extensions
    request.extensions_mut().insert(claims);
    request.extensions_mut().insert(user);
    
    Ok(next.run(request).await)
}
```

### Role-based Authorization
```rust
pub fn require_role(required_role: UserRole) -> impl Fn(Request<Body>, Next<Body>) -> Pin<Box<dyn Future<Output = Result<Response, StatusCode>> + Send>> + Clone {
    move |request: Request<Body>, next: Next<Body>| {
        let required_role = required_role.clone();
        Box::pin(async move {
            let claims = request.extensions()
                .get::<Claims>()
                .ok_or(StatusCode::UNAUTHORIZED)?;
            
            if !claims.role.has_permission(&required_role) {
                return Err(StatusCode::FORBIDDEN);
            }
            
            Ok(next.run(request).await)
        })
    }
}

impl UserRole {
    pub fn has_permission(&self, required: &UserRole) -> bool {
        match (self, required) {
            (UserRole::Admin, _) => true,
            (UserRole::Moderator, UserRole::User | UserRole::Guest) => true,
            (UserRole::User, UserRole::Guest) => true,
            (same, required) => same == required,
        }
    }
}
```

## Error Handling

```rust
#[derive(Debug, thiserror::Error)]
pub enum AuthError {
    #[error("Token generation failed: {0}")]
    TokenGeneration(jsonwebtoken::errors::Error),
    
    #[error("Token validation failed: {0}")]
    TokenValidation(jsonwebtoken::errors::Error),
    
    #[error("Password hashing failed: {0}")]
    PasswordHashing(argon2::password_hash::Error),
    
    #[error("Weak password: {0}")]
    WeakPassword(String),
    
    #[error("Invalid user ID format")]
    InvalidUserId,
    
    #[error("Task join error")]
    TaskJoinError,
}
```

## Session Management

### User Session Model
```rust
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct UserSession {
    #[serde(rename = "_id", skip_serializing_if = "Option::is_none")]
    pub id: Option<ObjectId>,
    pub user_id: ObjectId,
    pub access_token: String,
    pub refresh_token: String,
    pub created_at: chrono::DateTime<chrono::Utc>,
    pub expires_at: chrono::DateTime<chrono::Utc>,
}

impl UserSession {
    pub fn new(user_id: ObjectId, access_token: &str, refresh_token: &str) -> Self {
        let now = Utc::now();
        Self {
            id: None,
            user_id,
            access_token: access_token.to_string(),
            refresh_token: refresh_token.to_string(),
            created_at: now,
            expires_at: now + Duration::days(7), // Refresh token expiry
        }
    }
}
```

## Best Practices

### Security
- **Strong password requirements**: Minimum 8 chars with complexity
- **Secure token storage**: Never log tokens, use HTTPS only
- **Token expiration**: Short-lived access tokens (1 hour), longer refresh tokens (7 days)
- **Session cleanup**: Remove expired sessions regularly

### Error Handling
- **Generic error messages**: Don't reveal if email exists during login
- **Consistent timing**: Prevent timing attacks on user enumeration
- **Proper HTTP status codes**: 401 for authentication, 403 for authorization

### Performance
- **Password hashing**: Use async operations to avoid blocking
- **Database queries**: Index email and user_id fields
- **Session cleanup**: Background job to remove expired sessions

### Development
- **Environment secrets**: Store JWT secrets in environment variables
- **Test coverage**: Unit tests for all auth services
  - **API documentation**: Document all auth endpoints and error responses
