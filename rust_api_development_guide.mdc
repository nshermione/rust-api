# Rust API Development Guide - Always Type Rule

## Quy trình làm việc (Agent Process)

1. **Read**: Đọc hiểu yêu cầu dựa trên file rule
2. **Ask**: Clarify lại yêu cầu với user
3. **Approach**: Đưa ra 1-3 giải pháp với trade-offs
4. **Code**: Code từng phần nhỏ, không làm hết 1 lần
5. **Test**: Test sau mỗi phần code
6. **Document**: Lưu kiến thức vào file *.mdc

## Dự án Overview

- **Tech stack**: Axum, Tokio, Tower (middleware)
- **Architecture**: Hybrid Domain-Driven Design với System modules
- **Features**: API versioning, multi-env config, i18n locale, API docs, multiple MongoDB

## Project Structure Implemented

```
src/
├── system/              # Core system modules
│   ├── config/          # Environment configuration
│   ├── database/        # MongoDB connections
│   ├── locale/          # i18n support
│   ├── versioning/      # API versioning
│   └── docs/            # Auto-generated docs
├── domains/             # Business domains (DDD)
│   ├── auth/
│   │   ├── handlers/    # Route handlers
│   │   ├── services/    # Business logic
│   │   └── dto/         # Data transfer objects
├── middleware/          # Cross-cutting concerns
├── shared/              # Layer architecture for reusable components
│   ├── models/          # Shared data models
│   ├── constants/       # Global constants
│   ├── utils/           # Utility functions
│   └── types/           # Common types & enums
└── main.rs
```

## Config System Implementation

### Environment Configuration

- **Priority**: .env.default → .env.{environment} → .env.local → env variables
- **Location**: configs/ folder (separated from root)
- **Support**: Multiple environments (development, staging, production)

### Config Structure

```rust
pub struct AppConfig {
    pub server: ServerConfig,
    pub log: LogConfig,
    pub databases: Vec<DatabaseConfig>,
    pub environment: String,
}
```

### Multi-Database Support

- **Format**: DB_HOST, DB1_HOST, DB2_HOST...
- **Features**: Connection pooling, timeout, credentials
- **Use case**: Different databases for different purposes

### Usage Example

```rust
// Load config
let config = AppConfig::load()?;

// Use in Axum with Arc for sharing
let config = Arc::new(config);
let app = Router::new()
    .route("/", {
        let config = config.clone();
        get(move || handler(config))
    });
```

## Implementation Notes

- Use `Arc<AppConfig>` for sharing config between routes
- Environment files support comments (#) and quoted values
- Unsafe block required for `env::set_var`
- Default values provided for all config options

## MongoDB Database Implementation

### Database Manager Features

- **Multi-database support**: DB_HOST, DB1_HOST, DB2_HOST...
- **Connection pooling**: Max connections, timeouts, credentials
- **Health monitoring**: Ping tests, connection status
- **Graceful shutdown**: Cleanup connections on exit
- **Error handling**: Comprehensive error contexts

### Database Configuration

```rust
#[derive(Debug, Clone)]
pub struct DatabaseConfig {
    pub host: String,
    pub port: u16,
    pub database: String,
    pub username: Option<String>,
    pub password: Option<String>,
    pub connection_timeout: u64,
    pub max_connections: u32,
}
```

### Usage Example

```rust
// Initialize database manager
let db_manager = DatabaseService::initialize(&config).await?;

// Get database connection
let db = get_database(&db_manager, Some("default")).await?;

// Health check
let health_status = health_check(&db_manager).await?;
```

### New API Endpoints

- `GET /db/health`: Database connection health status
- `GET /db/connections`: List all database connections
- `GET /health`: Enhanced with database status

## Locale/i18n System Implementation

### Features Implemented

- **Multi-language support**: English (default), Vietnamese, Japanese, Korean, Chinese
- **Locale detection priority**: Query params → Accept-Language header → JWT token → Default
- **Message loading**: JSON files with caching and fallback support
- **Parameter interpolation**: {name} style placeholders in messages
- **Fallback chains**: Vietnamese → English, etc.

### Locale System Structure

```rust
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum Locale {
    En, Vi, Ja, Ko, Zh
}

pub struct LocaleInfo {
    pub locale: Locale,
    pub source: LocaleSource, // Header, Token, Query, Default
    pub fallback: Option<Locale>,
}

pub struct MessageLoader {
    base_path: PathBuf,
    cache: Arc<RwLock<HashMap<Locale, Messages>>>,
    registry: LocaleRegistry,
}
```

### Message Files Structure

```json
{
  "messages": {
    "hello": "Hello",
    "welcome": "Welcome, {name}!",
    "api.status.healthy": "System is healthy"
  },
  "metadata": {
    "locale": "en",
    "version": "1.0.0",
    "last_updated": "2024-01-01T00:00:00Z",
    "translators": ["Native Speaker"]
  }
}
```

### Usage Example

```rust
// Extract locale from request
let locale_info = extract_locale_info(headers, query).await?;

// Load messages
let loader = MessageLoader::new("locales");
let message = loader.get_message("hello", &locale_info.locale).await?;

// With parameters
let mut params = HashMap::new();
params.insert("name".to_string(), "User".to_string());
let welcome = loader.get_message_with_params("welcome", &locale_info.locale, &params).await?;
```

### New API Endpoints

- `GET /locale/test`: Test locale detection from headers/query/token
- `GET /locale/translate`: Show translations in detected language

### Detection Examples

- **Header**: `Accept-Language: vi` or `Accept-Locale: vi`
- **Query**: `?lang=vi` or `?locale=vi`  
- **Token**: `Authorization: Bearer token.with.vi` (mock implementation)

## Next Steps

- [x] Database connection implementation
- [x] API versioning middleware  
- [x] Locale/i18n system
- [ ] Authentication domain
- [ ] API documentation generation

## References

- [Axum Documentation](https://docs.rs/axum)
- [Tokio Runtime](https://docs.rs/tokio)
